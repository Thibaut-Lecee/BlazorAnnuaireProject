@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers
@inject IToastService ToastService

<div class="modal" tabindex="-1" style="display:@(IsOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            @if(InputVisible == true)
            {
            <h5 class="modal-title">Modification du salarié</h5>
            } else 
            {

                <h5 class="modal-title">Informations du salarié</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            }
            </div>
            @if (InputVisible == true)
            {
                <div class="modal-body">
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.Nom" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.Prenom" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.Email" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.TelephoneFixe" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.TelephonePortable" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.Service" />
                    <input type="text" class="form-control mt-2 mb-2" placeholder="@Salaries.Site" />
                </div>
            } else {
             <div class="modal-body">
                <!-- Les informations du salarié seront ajoutées ici -->
                <p>Nom: @Salaries?.Nom</p>
                 <p>Prénom: @Salaries?.Prenom</p>
                <p>Email: @Salaries?.Email</p>
                <p>Date de création: @Salaries?.CreatedAt</p>
                <p>Téléphone fixe: @Salaries?.TelephoneFixe</p>
                <p>Téléphone portable: @Salaries?.TelephonePortable</p>
                <p>Service: @Salaries?.Service</p>
                <p>Site: @Salaries?.Site</p> 
            </div>
            }
            
            <div class="modal-footer">
            @if(InputVisible == true){
            <button type="button" class="btn btn-success" @onclick="UpdateSalarie" >Enregistrer</button>
            } else {
                <button type="button" class="btn btn-warning" @onclick="UpdateSalarie">Modifier</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSalarieAsync">Supprimer</button>
                 <button type="button" class="btn btn-secondary" @onclick="Close">Fermer</button>
            }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] public SalariesDto? Salaries { get; set; }
    [Parameter] public EventCallback OnRefreshNeeded { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }
    public bool IsOpen { get; set; }
    public bool InputVisible { get; set; } = false;

    public void Show(SalariesDto salaries)
    {
        Salaries = salaries;
        Console.WriteLine(salaries.Nom);
        IsOpen = true;
        StateHasChanged();
   }
private async Task<string> GetCookieValueAsync(string cookieName)
{
    return await JSRuntime.InvokeAsync<string>("getCookie", cookieName);
}


     private void UpdateSalarie()
    {
                InputVisible = !InputVisible;
    
    }

  private async Task DeleteSalarieAsync()
{
    if (Salaries?.Email != null)
    {
        string accessToken = await GetCookieValueAsync("AccessToken");

        if (accessToken == null)
        {
            ToastService.ShowError("L'AccessToken est manquant");
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete, $"Auth/DeleteSalarie/{Salaries.Email}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Le salarié a bien été supprimé");
             await OnRefreshNeeded.InvokeAsync();
            // Fermer le modal et rafraîchir la liste des salariés
            await Close();
            // Si vous avez une méthode pour charger les salariés, appelez-la ici
            // par exemple : await LoadSalaries();
        }
        else
        {
            ToastService.ShowError("Erreur lors de la suppression du salarié");
        }
    }
    else
    {
        ToastService.ShowError("L'adresse e-mail du salarié est manquante");
    }
}


    private async Task Close()
    {
        IsOpen = false;
        await OnClose.InvokeAsync(IsOpen);
    }
}