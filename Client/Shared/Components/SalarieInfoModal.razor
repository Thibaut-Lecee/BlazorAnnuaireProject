@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers
@inject IToastService ToastService
@using System.Text.Json
@using System.Net.Http.Json

<div class="modal" tabindex="-1" style="display:@(IsOpen ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            @if(InputVisible == true)
            {
            <h5 class="modal-title">Modification du salarié</h5>
            } else 
            {

                <h5 class="modal-title">Informations du salarié</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            }
            </div>
            @if (InputVisible == true)
            {
                  <EditForm Model="@Salaries" OnValidSubmit="UpdateSalarieAsync">
            <!-- Ici on affiche alors les erreurs si y en a -->
    <DataAnnotationsValidator />
    <ValidationSummary />
                <div class="modal-body">
                    <input type="text" class="form-control mt-2 mb-2" @bind="@Salaries.Nom" />
                    <input type="text" class="form-control mt-2 mb-2" @bind="@Salaries.Prenom" />
                    <input type="text" class="form-control mt-2 mb-2" @bind="@Salaries.Email" />
                    <input type="text" class="form-control mt-2 mb-2" maxlength="10" @bind="@Salaries.TelephoneFixe" />
                    <input type="text" class="form-control mt-2 mb-2" maxlength="10" @bind="@Salaries.TelephonePortable" />
                    <select class="form-control mt-2 mb-2" @bind="@Salaries.Service" >
        <option value="">Tous les services</option>
        @foreach (var service in allServices) {
            <option value="@service.Nom">@service.Nom</option>
        }
        
    </select>
                  <select class="form-control mt-2 " @bind="@Salaries.Site">
        <option value="">Tous les sites</option>
        @foreach (var site in allSites) {
            <option value="@site.Ville">@site.Ville</option>
        }
    </select>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Enregistrer</button>
                    <button type="button" class="btn btn-secondary" @onclick="Close">Fermer</button>
                </div>
            </EditForm>

            } else {
             <div class="modal-body">
                <!-- Les informations du salarié seront ajoutées ici -->
                <p>Nom: @Salaries?.Nom</p>
                 <p>Prénom: @Salaries?.Prenom</p>
                <p>Email: @Salaries?.Email</p>
                <p>Date de création: @Salaries?.CreatedAt</p>
                <p>Téléphone fixe: @Salaries?.TelephoneFixe</p>
                <p>Téléphone portable: @Salaries?.TelephonePortable</p>
                <p>Service: @Salaries?.Service</p>
                <p>Site: @Salaries?.Site</p>
            </div>
            }
            
            <div class="modal-footer">
             @if(AccessToken != null) {
                @if(InputVisible == false) {
                <button type="button" class="btn btn-warning" @onclick="OnVisible">Modifier</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSalarieAsync">Supprimer</button>
                }
                 
            }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] public SalariesDto? Salaries { get; set; }
    [Parameter] public EventCallback OnRefreshNeeded { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }
    public bool IsOpen { get; set; }
    public bool InputVisible { get; set; } = false;
    private string AccessToken { get; set; } = null;
      private List<SiteWithServicesDto> allSites = new List<SiteWithServicesDto>();
    private List<ServiceDto> allServices = new List<ServiceDto>();

    public void Show(SalariesDto salaries)
    {
        Salaries = salaries;
        Console.WriteLine(salaries.Nom);
        IsOpen = true;
        StateHasChanged();
   }

    protected override async Task OnInitializedAsync()
    {
        AccessToken = await GetCookieValueAsync("AccessToken");
        Console.WriteLine(AccessToken);
         allSites = await Http.GetFromJsonAsync<List<SiteWithServicesDto>>("/Site");
        allServices = await Http.GetFromJsonAsync<List<ServiceDto>>("/Service");
    }

private async Task<string> GetCookieValueAsync(string cookieName)
{
    return await JSRuntime.InvokeAsync<string>("getCookie", cookieName);
}

private void OnVisible() {
    InputVisible = !InputVisible;
    StateHasChanged();
}

    private async Task UpdateSalarieAsync()
{
    

    string accessToken = await GetCookieValueAsync("AccessToken");
    if (accessToken == null)
    {
        ToastService.ShowError("L'AccessToken est manquant");
        InputVisible = false;
        return;
    }

    var request = new HttpRequestMessage(HttpMethod.Put, $"Auth/UpdateSalarie/{Salaries.Id}");
    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

    // Sérialisez l'objet Salaries en JSON et ajoutez-le au corps de la requête
    request.Content = JsonContent.Create(Salaries);

    var response = await Http.SendAsync(request);
    if (response.IsSuccessStatusCode)
    {
        ToastService.ShowSuccess("Le salarié a bien été modifié");
        await OnRefreshNeeded.InvokeAsync();
        await Close();
        InputVisible = false;
    }
    else
    {
        await Close();
        ToastService.ShowError("Erreur lors de la modification du salarié");
    }
}


  private async Task DeleteSalarieAsync()
{
    if (Salaries?.Email != null)
    {
        string accessToken = await GetCookieValueAsync("AccessToken");

        if (accessToken == null)
        {
            ToastService.ShowError("L'AccessToken est manquant");
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete, $"Auth/DeleteSalarie/{Salaries.Email}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        request.Content = JsonContent.Create(Salaries);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Le salarié a bien été supprimé");
             await OnRefreshNeeded.InvokeAsync();
            // Fermer le modal et rafraîchir la liste des salariés
            await Close();
            // Si vous avez une méthode pour charger les salariés, appelez-la ici
            // par exemple : await LoadSalaries();
        }
        else
        {
            ToastService.ShowError("Erreur lors de la suppression du salarié");
        }
    }
    else
    {
        ToastService.ShowError("L'adresse e-mail du salarié est manquante");
    }
}


    private async Task Close()
    {
        IsOpen = false;
        await OnClose.InvokeAsync(IsOpen);
    }
}