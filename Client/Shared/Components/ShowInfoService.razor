@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Net.Http.Headers
@inject IToastService ToastService
@using System.Text.Json
@using System.Net.Http.Json

<div class="modal" tabindex="-1" style="display:@(IsOpen ? "block" : "none")">
  <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Informations sur les services</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
<div class="form-group d-flex justify-content-around align-items-center ">
<div style="max-height: calc(90vh - 200px);
    overflow-y: auto;
    display: block;">
<table class="table">
    <thead>
        <tr>
            <th>Nom</th>
            <th>Actions</th>
        </tr>
    </thead>
     <tbody>
            @foreach (var service in allServices)
            {
                <tr>
                    <td>@service.Nom</td>
                   
                    <td>
                        <button type="button" class="btn btn-success">Modifier</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteSiteAsync(service)">Supprimer</button>
                    </td>

                </tr>
            }

    </tbody> 
</table>
</div>
</div>
</div>
</div>
</div>
@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    private List<ServiceDto> allServices = new List<ServiceDto>();
    private ServiceDto Service { get; set; } = new ServiceDto();
    [Parameter] public EventCallback OnRefreshNeeded { get; set; }
    private string AccessToken { get; set; } = null;
    private bool IsOpen { get; set; }

   
    private async Task<string> GetCookieValueAsync(string cookieName)
    {
        return await JSRuntime.InvokeAsync<string>("getCookie", cookieName);
    }

    private async Task Close() {
        IsOpen = false;
        await OnClose.InvokeAsync(IsOpen);
    }
    public async void Show()
    {
        IsOpen = true;
        AccessToken = await GetCookieValueAsync("AccessToken");
        allServices = await Http.GetFromJsonAsync<List<ServiceDto>>("/Service");
        await OnRefreshNeeded.InvokeAsync();
        StateHasChanged();
    }

    private async Task DeleteSiteAsync(ServiceDto service) {
        Console.WriteLine(service.Nom);
        
            if(service.Nom != null && AccessToken != null) {
                var request = new HttpRequestMessage(HttpMethod.Delete, $"/Service/{service.Nom}");
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
                request.Content = JsonContent.Create(service);
                var response = await Http.SendAsync(request);
                if (response.IsSuccessStatusCode) {
                    ToastService.ShowSuccess("Le service a bien été supprimé");
                    await OnRefreshNeeded.InvokeAsync();
                    await Close();
                } else {
                    ToastService.ShowError("Une erreur est survenue lors de la suppression du site");
                }

            }

    }

    private async Task UpdateServiceAsync() {
        
    }

}