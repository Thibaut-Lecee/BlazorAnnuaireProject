@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Net.Http.Headers
@inject IToastService ToastService
@using System.Text.Json
@using System.Net.Http.Json

<div class="modal" tabindex="-1" style="display:@(IsOpen ? "block" : "none")">
  <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Informations sur les services</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
<div class="form-group d-flex justify-content-around align-items-center ">
<div style="max-height: calc(90vh - 200px);
    overflow-y: auto;
    display: block;">
<table class="table">
    <thead>
        <tr>
            <th>Nom</th>
            <th>Actions</th>
        </tr>
    </thead>
     <tbody>
            @foreach (var service in allServices)
            {
                <tr>
                     @if(SelectedServiceId == service.Id && InputVisible == true) {
                    <td>
            <input type="text" class="form-control mt-2 mb-2" @bind="service.Nom" placeholder="Nom" />
                    </td>
        } else {
                    <td>@service.Nom</td>
                    
                    }
                   
                    <td class="col-lg-6 col-md-6 col-sm-6 col-xs-6 d-flex flex-row justify-content-around w-100 " >
                        <button type="button" class="btn btn-outline-success btn-sm ms-1" @onclick="() => UpdateServiceAsync(service)">Enregistrer</button>
                        <button type="button" class="btn btn-outline-warning  btn-sm ms-1" @onclick="() => EditService(service.Id)">Modifier</button>
                        <button type="button" class="btn btn-outline-danger btn-sm ms-1" @onclick="() => DeleteSiteAsync(service)">Supprimer</button>
                    </td>

                </tr>
            }

    </tbody> 
</table>
</div>
</div>
</div>
</div>
</div>
@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    private List<ServiceDto> allServices = new List<ServiceDto>();
    private ServiceDto Service { get; set; } = new ServiceDto();
    [Parameter] public EventCallback OnRefreshNeeded { get; set; }
    private string AccessToken { get; set; } = null;
    private bool IsOpen { get; set; }
    private bool InputVisible { get; set; } = false;
    private int? SelectedServiceId { get; set; }

   // gérer les inputs comme dans le ShowSiteModal

    private async Task<string> GetCookieValueAsync(string cookieName)
    {
        return await JSRuntime.InvokeAsync<string>("getCookie", cookieName);
    }

    private void EditService(int serviceId) {
    SelectedServiceId = serviceId;
    InputVisible = !InputVisible;
    StateHasChanged();
}
    private async Task Close() {
        IsOpen = false;
        InputVisible = false;
        await OnClose.InvokeAsync(IsOpen);
    }
    public async void Show()
    {
        IsOpen = true;
        AccessToken = await GetCookieValueAsync("AccessToken");
        allServices = await Http.GetFromJsonAsync<List<ServiceDto>>("/Service");
        await OnRefreshNeeded.InvokeAsync();
        StateHasChanged();
    }

    private async Task DeleteSiteAsync(ServiceDto service) {
        Console.WriteLine(service.Nom);
            try {

            
            if(service.Nom != null && AccessToken != null) {
                var request = new HttpRequestMessage(HttpMethod.Delete, $"/Service/{service.Nom}");
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
                request.Content = JsonContent.Create(service);
                var response = await Http.SendAsync(request);
                if (response.IsSuccessStatusCode) {
                    ToastService.ShowSuccess("Le service a bien été supprimé");
                    await OnRefreshNeeded.InvokeAsync();
                    await Close();
                } else {
                    ToastService.ShowError("Une erreur est survenue lors de la suppression du site");
                }

            }
        } catch (Exception e) {
            Console.WriteLine(e.Message);
            ToastService.ShowError(e.Message);
        }

    }

    private async Task UpdateServiceAsync(ServiceDto service) {
       try {
 if (service.Nom != null && AccessToken != null) {

            var request = new HttpRequestMessage(HttpMethod.Put, $"/Service/{service.Id}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
            request.Content = JsonContent.Create(service);
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode) {
                ToastService.ShowSuccess("Le service a bien été modifié");
                await OnRefreshNeeded.InvokeAsync();
                InputVisible = false;
                await Close();
            } else {
                ToastService.ShowError("Une erreur est survenue lors de la modification du service");
            }
        }
       } catch (Exception e) {
           Console.WriteLine(e.Message);
           ToastService.ShowError("Une erreur est survenue lors de la modification du service");
       }
        
    }

}