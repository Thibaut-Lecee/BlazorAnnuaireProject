@page "/login"

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



<h3>Connexion</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-floating mb-3">
        <InputText id="email" class="form-control" @bind-Value="@loginModel.Email" placeholder="Adresse e-mail" />
        <label for="email">Adresse e-mail</label>
    </div>

    <div class="form-floating mb-3">
        <InputText id="password" class="form-control" @bind-Value="@loginModel.Password" type="password" placeholder="Mot de passe" />
        <label for="password">Mot de passe</label>
    </div>

    <button type="submit" class="btn btn-primary">Se connecter</button>
</EditForm>

<!-- <ToastComponent @ref="toastLog" /> -->

@code 
{
    ToastComponent toastLog;
    private AuthenticateRequest loginModel = new AuthenticateRequest();

    private async void ShowModal() {
       toastLog.ShowToast();
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<AuthenticateRequest>("/Auth/Login", loginModel);
            var authResult = await response.Content.ReadFromJsonAsync<AuthenticateResponse>();
            
            if (response.IsSuccessStatusCode)
            {
               
                // Redirigez l'utilisateur vers la page d'accueil ou une autre page après la connexion réussie
                NavigationManager.NavigateTo("/salaries");
            }
            else
            {
                // Affichez une erreur si la connexion échoue
                Console.WriteLine("Erreur lors de la connexion : " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            // Gérez les exceptions ici
            Console.WriteLine("Erreur : " + ex.Message);
        }
    }
}
