
        @if (_loading)
{
    // Loading screen avec une animation Lottie et une animation CSS
    <div @ref="_loadingScreen" style="animation: fading-out 2s ease-in-out forwards; height: 100vh; width: 100vw; background: white; position: absolute; transform: translate(-50%, -50%); top: 50%; left: 50%; z-index: 9999;">
            <lottie-player src="https://assets8.lottiefiles.com/private_files/lf30_uvrwjrrs.json" background="transparent" speed="2"
        style="width: 500px; height: 500px; position:absolute; transform: translate(-50%, -50%); top: 50%; left: 50%;"  loop autoplay ></lottie-player>
    </div>
}
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    // reference au loading screen
    private ElementReference _loadingScreen;

    private bool _loading = true;
    private int _delay = 1000 * 2; // 2 secondes

    // OnInitializedAsync est appelé au chargement de la page et permet de faire des actions asynchrones
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(_delay);
        _loading = false;
    }
}